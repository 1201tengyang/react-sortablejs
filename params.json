{"name":"React-sortable","tagline":"A higher order React component for Sortable (https://github.com/RubaXa/Sortable).","body":"# react-sortable [![build status](https://travis-ci.org/cheton/react-sortable.svg?branch=master)](https://travis-ci.org/cheton/react-sortable) [![Coverage Status](https://coveralls.io/repos/cheton/react-sortable/badge.svg)](https://coveralls.io/r/cheton/react-sortable)\r\n[![NPM](https://nodei.co/npm/react-sortablejs.png?downloads=true&stars=true)](https://nodei.co/npm/react-sortablejs/)\r\n\r\nA higher order React component for [Sortable](https://github.com/RubaXa/Sortable).\r\n\r\n## Installation\r\nThe easiest way to use react-sortablejs is to install it from npm and include it in your React build process using webpack or browserify.\r\n```bash\r\nnpm install --save react-sortablejs\r\n```\r\n\r\nYou can create a standalone module using webpack:\r\n```bash\r\n$ npm install\r\n$ webpack\r\n```\r\n\r\n## Options\r\n\r\n#### `ref` option\r\nSpecify which items inside the `ref` attribute should be sortable.\r\n\r\n#### `model` option\r\nThe state attribute for creating a sortable list.\r\n\r\n\r\nSee more options at https://github.com/RubaXa/Sortable#options\r\n```js\r\n{\r\n    ref: 'list',\r\n    model: 'items',\r\n    onStart: 'handleStart',\r\n    onEnd: 'handleEnd',\r\n    onAdd: 'handleAdd',\r\n    onUpdate: 'handleUpdate',\r\n    onRemove: 'handleRemove',\r\n    onSort: 'handleSort',\r\n    onFilter: 'handleFilter',\r\n    onMove: 'handleMove',\r\n    // Sortable options\r\n    group: \"name\",  // or { name: \"...\", pull: [true, false, clone], put: [true, false, array] }\r\n    sort: true,  // sorting inside list\r\n    delay: 0, // time in milliseconds to define when the sorting should start\r\n    disabled: false, // Disables the sortable if set to true.\r\n    store: null,  // @see Store\r\n    animation: 150,  // ms, animation speed moving items when sorting, `0` â€” without animation\r\n    handle: \".my-handle\",  // Drag handle selector within list items\r\n    filter: \".ignore-elements\",  // Selectors that do not lead to dragging (String or Function)\r\n    draggable: \".item\",  // Specifies which items inside the element should be sortable\r\n    ghostClass: \"sortable-ghost\",  // Class name for the drop placeholder\r\n    chosenClass: \"sortable-chosen\",  // Class name for the chosen item\r\n    dataIdAttr: 'data-id',\r\n    forceFallback: false,  // ignore the HTML5 DnD behaviour and force the fallback to kick in\r\n    fallbackClass: \"sortable-fallback\"  // Class name for the cloned DOM Element when using forceFallback\r\n    fallbackOnBody: false  // Appends the cloned DOM Element into the Document's Body\r\n    scroll: true, // or HTMLElement\r\n    scrollSensitivity: 30, // px, how near the mouse must be to an edge to start scrolling.\r\n    scrollSpeed: 10, // px\r\n    setData: function (dataTransfer, dragEl) {\r\n        dataTransfer.setData('Text', dragEl.textContent);\r\n    }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nimport React from 'react';\r\nimport SortableMixin from 'react-sortablejs';\r\n\r\nconst sortableOptions = {\r\n    ref: 'list',\r\n    model: 'items'\r\n};\r\n\r\nclass MySortableComponent extends React.Component {\r\n    state = {\r\n        items: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    };\r\n    \r\n    handleStart(evt) { // Dragging started\r\n    }\r\n    handleEnd(evt) { // Dragging ended\r\n    }\r\n    handleAdd(evt) { // Element is dropped into the list from another list\r\n    }\r\n    handleUpdate(evt) { // Changed sorting within list\r\n    }\r\n    handleRemove(evt) { // Element is removed from the list into another list\r\n    }\r\n    handleSort(evt) { // Called by any change to the list (add / update / remove)\r\n    }\r\n    handleFilter(evt) { // Attempt to drag a filtered element\r\n    }\r\n    handleMove(evt) { // Event when you move an item in the list or between lists\r\n    }\r\n    render() {\r\n        const items = this.state.items.map((text, index) => (\r\n            <li key={index}>{text}</li>\r\n        ));\r\n        \r\n        return (\r\n            <div>\r\n                <ul ref=\"list\">{items}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortableMixin(MySortableComponent, sortableOptions);\r\n```\r\n\r\n## Examples\r\n\r\nUsing the `group` option to drag elements from one list into another.\r\n\r\nFile: index.jsx\r\n```js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Sortable1 from './sortable1';\r\nimport Sortable2 from './sortable2';\r\n\r\nconst SortableList = (props) => {\r\n    return (\r\n        <div>\r\n            <Sortable1 />\r\n            <hr />\r\n            <Sortable2 />\r\n        </div>\r\n    );\r\n};\r\n\r\nReactDOM.render(<SortableList />, document.body);\r\n```\r\n\r\nFile: sortable1.jsx\r\n\r\n```js\r\nimport React from 'react';\r\nimport SortableMixin from 'react-sortablejs';\r\n\r\nclass Sortable1 extends React.Component {\r\n    state = {\r\n        items: [0, 1, 2, 3, 4]\r\n    };\r\n\r\n    render() {\r\n        let items = this.state.items.map((text, index) => {\r\n            return <li key={index}>{text}</li>;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <ul ref=\"list\">{items}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortableMixin(Sortable1, { group: 'shared' });\r\n```\r\n\r\nFile: sortable2.jsx\r\n\r\n```js\r\nimport React from 'react';\r\nimport SortableMixin from 'react-sortablejs';\r\n\r\nclass Sortable2 extends React.Component {\r\n    state = {\r\n        items: [5, 6, 7, 8, 9]\r\n    };\r\n\r\n    render() {\r\n        let items = this.state.items.map((text, index) => {\r\n            return <li key={index}>{text}</li>;\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <ul ref=\"list\">{items}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortableMixin(Sortable2, { group: 'shared' });\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}